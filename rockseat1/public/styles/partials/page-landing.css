/*note como aqui nos puxamos várias classes para mexer no nosso landing-page(página inicial do site)
e também puxamos até mais de uma para fazer as alterações de estilo*/

#page-landing{
    background: var(--color-primary);

}

#page-landing #container{
    color: var(--color-text-in-primary);
}

.logo-container img {
    height: 10rem;
}

.logo-container{
    text-align: center; /*isso vai fazer com que o texto presente no container vá para o meio, a imagem também está inclusa nisso*/
    margin-bottom: 3.2rem;
}

.logo-container h2{
    font-weight: 500;
    font-size: 3.6rem;
    line-height: 4.6rem;
    margin-top: 0.8rem;
}

.hero-image{
    width: 100%;
}

.buttons-container{
    display: flex;
    justify-content: center;
    margin: 3.2rem 0;
}

.buttons-container a{   /*note que estamos mexendo no container do link apenas*/
    width: 30rem;
    height: 10.4rem;
    
    border-radius: 1rem;
    margin-right: 1.6rem;

    font: 700 2.4rem Archivo;

    display: flex;  /*o flex nos permite que possamos modificar o posicionamento de vários itens do container que estamos mexendo*/
    align-items: center;    /* isso permite com que a gente alinhe os itens que possuímos dentro desse container*/
    justify-content: center;    /*isso faz com que o contexto do texto ou demais itens esteja sempre ao centro, como fazemos no word*/

    text-decoration: none;

    transition: background 0.2s;    /*isso faz com que haja uma animação ao passarmos o mouse em cima do botão durante a transição para a outra cor*/

    color: var(--color-button-text);
}

.buttons-container a img{
    width: 4rem;
    margin-right: 2rem; /*estamos dando uma separada para a direita da img do texto para ter um espaçamento*/
}

.buttons-container a.study{
    background: var(--color-primary-lighter);
}

.buttons-container a.study:hover{
    background: var(--color-primary-light);
}

.buttons-container a.give-classes{
    background: var(--color-secondary);
    margin-right: 0; /*só para ajustar, tirar o espaçamento depois do segundo botão*/
}

.buttons-container a.give-classes:hover{
    background: var(--color-secondary-dark);
}

.total-connections{
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.total-connections img{
    margin-left: 0.8rem;
}

@media (min-width: 1100px){ 
    /* ele vai checar se a largura minima de nosso dispositivo é de 1100 pixel, e as config aqui serão aplicadas apenas para dispositivos com esse requisito */
    #page-landing #container{
        max-width: 1100px;
        display: grid;
        grid-template-columns: 2fr 1fr 2fr; /*fr são frações  do espaço de tela para cada coluna nós definimos como tendo 3 colunas*/
        grid-template-rows: 350px 1fr; /*aqui a gente deixo 2 linhas, uma de 350px fixos e outra com 1fr, fr são flexíveis tamanhos pixel é fixo*/
            /*lembre-se que estamos fracionando o container e não o html todo, podemos ver os grids de forma mais fácil pelo inspecionador do navegador*/
            /*daqui em diante tentaremos mudar um pouco onde cada objeto ficarão posicionados das frações do grid*/
        grid-template-areas: 
        "proffy image image"
        "button button texting";    /*note que aqui nós descrevemos onde cada coisa vai, isso é a forma com que o grid será organizado*/
        column-gap: 87px;
        row-gap: 86px;
    }
    /*abaixo configuraremos cada classe de acordo com a área que elas estarão presentes no nosso grid*/
    .logo-container{
        grid-area: proffy;
        text-align: initial;    /*também vamos configurar para que fique o mais parecido com o template do figma possível*/
        align-self: center;
    }

    .logo-container img{
        height: 127px;
        margin: 0;
    }
    .hero-image{
        grid-area: image;
        height: 350px;
    }
    .buttons-container{
        grid-area: button;
        justify-content: flex-start;
        margin: 0;
        
    }
    .total-connections{
        grid-area: texting;
        justify-self: end;
        font-size: 1.2rem;
    }

}
